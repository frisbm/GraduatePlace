// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: document.sql

package store

import (
	"context"
	"encoding/json"
	"time"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (
    uuid, user_id, title, description, filename, filetype, content
) VALUES (
    gen_random_uuid(), $1, $2, $3, $4, $5, $6
)
RETURNING id, uuid, user_id, created_at, updated_at, title, description, filename, filetype, content, ts
`

type CreateDocumentParams struct {
	UserID      int32
	Title       string
	Description string
	Filename    string
	Filetype    string
	Content     *string
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (*Document, error) {
	row := q.db.QueryRowContext(ctx, createDocument,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Filename,
		arg.Filetype,
		arg.Content,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.Filetype,
		&i.Content,
		&i.Ts,
	)
	return &i, err
}

const getDocument = `-- name: GetDocument :one
SELECT id, uuid, user_id, created_at, updated_at, title, description, filename, filetype, content, ts FROM documents
WHERE id=$1
`

func (q *Queries) GetDocument(ctx context.Context, id int32) (*Document, error) {
	row := q.db.QueryRowContext(ctx, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.Filetype,
		&i.Content,
		&i.Ts,
	)
	return &i, err
}

const setDocumentContent = `-- name: SetDocumentContent :one
UPDATE documents
SET content = to_tsvector($2)
WHERE id=$1 RETURNING id, uuid, user_id, created_at, updated_at, title, description, filename, filetype, content, ts
`

type SetDocumentContentParams struct {
	ID         int32
	ToTsvector json.RawMessage
}

func (q *Queries) SetDocumentContent(ctx context.Context, arg SetDocumentContentParams) (*Document, error) {
	row := q.db.QueryRowContext(ctx, setDocumentContent, arg.ID, arg.ToTsvector)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.Filetype,
		&i.Content,
		&i.Ts,
	)
	return &i, err
}

const setDocumentHistoryUserId = `-- name: SetDocumentHistoryUserId :one
UPDATE documents_history
SET history_user_id = $3
WHERE id=$1 AND history_time=$2
RETURNING id, uuid, user_id, created_at, updated_at, title, description, filename, filetype, content, ts, history_time, history_user_id, operation
`

type SetDocumentHistoryUserIdParams struct {
	ID            int32
	HistoryTime   time.Time
	HistoryUserID *int32
}

func (q *Queries) SetDocumentHistoryUserId(ctx context.Context, arg SetDocumentHistoryUserIdParams) (*DocumentsHistory, error) {
	row := q.db.QueryRowContext(ctx, setDocumentHistoryUserId, arg.ID, arg.HistoryTime, arg.HistoryUserID)
	var i DocumentsHistory
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.Filetype,
		&i.Content,
		&i.Ts,
		&i.HistoryTime,
		&i.HistoryUserID,
		&i.Operation,
	)
	return &i, err
}
