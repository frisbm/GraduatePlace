// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: document.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"

	document "github.com/frisbm/graduateplace/pkg/models/document"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (uuid, user_id, title, description, filename, filetype, content)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6)
RETURNING id, uuid, user_id, created_at, updated_at, title, description, filename, filetype, content, content_hash
`

type CreateDocumentParams struct {
	UserID      int32
	Title       string
	Description string
	Filename    string
	Filetype    document.Filetype
	Content     *string
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (*Document, error) {
	row := q.queryRow(ctx, q.createDocumentStmt, createDocument,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Filename,
		arg.Filetype,
		arg.Content,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.Filetype,
		&i.Content,
		&i.ContentHash,
	)
	return &i, err
}

const getDocument = `-- name: GetDocument :one
SELECT id, uuid, user_id, created_at, updated_at, title, description, filename, filetype, content, content_hash
FROM documents
WHERE id = $1
`

func (q *Queries) GetDocument(ctx context.Context, id int32) (*Document, error) {
	row := q.queryRow(ctx, q.getDocumentStmt, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.Filetype,
		&i.Content,
		&i.ContentHash,
	)
	return &i, err
}

const searchDocuments = `-- name: SearchDocuments :many
WITH matching_search_results AS (SELECT document_id,
                                        ts_rank_cd(ts, query, 32) AS document_rank
                                 FROM documents_search,
                                      websearch_to_tsquery('english', $3) query
                                 WHERE query @@ ts
                                 group by 1, 2
                                 ORDER BY document_rank DESC
                                 LIMIT 1000)
SELECT documents.uuid,
       documents.created_at,
       documents.updated_at,
       documents.title,
       documents.description,
       documents.filename,
       documents.filetype,
       users.username,
       matching_search_results.document_rank           AS rank,
       (SELECT COUNT('') FROM matching_search_results) AS count
FROM documents
         JOIN matching_search_results ON documents.id = matching_search_results.document_id
         JOIN users ON users.id = documents.user_id
ORDER BY rank DESC
LIMIT $1 OFFSET $2
`

type SearchDocumentsParams struct {
	Limit              int32
	Offset             int32
	WebsearchToTsquery string
}

type SearchDocumentsRow struct {
	Uuid        uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	Filename    string
	Filetype    document.Filetype
	Username    string
	Rank        float32
	Count       int64
}

func (q *Queries) SearchDocuments(ctx context.Context, arg SearchDocumentsParams) ([]*SearchDocumentsRow, error) {
	rows, err := q.query(ctx, q.searchDocumentsStmt, searchDocuments, arg.Limit, arg.Offset, arg.WebsearchToTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchDocumentsRow{}
	for rows.Next() {
		var i SearchDocumentsRow
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Filename,
			&i.Filetype,
			&i.Username,
			&i.Rank,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDocumentContent = `-- name: SetDocumentContent :one
UPDATE documents
SET content = $2
WHERE id = $1
RETURNING id, uuid, user_id, created_at, updated_at, title, description, filename, filetype, content, content_hash
`

type SetDocumentContentParams struct {
	ID      int32
	Content *string
}

func (q *Queries) SetDocumentContent(ctx context.Context, arg SetDocumentContentParams) (*Document, error) {
	row := q.queryRow(ctx, q.setDocumentContentStmt, setDocumentContent, arg.ID, arg.Content)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.Filetype,
		&i.Content,
		&i.ContentHash,
	)
	return &i, err
}

const setDocumentHistoryUserId = `-- name: SetDocumentHistoryUserId :one
UPDATE documents_history
SET history_user_id = $3
WHERE document_id = $1
  AND history_time = $2
RETURNING id, uuid, user_id, created_at, updated_at, title, description, filename, filetype, content, content_hash, document_id, history_time, history_user_id, operation
`

type SetDocumentHistoryUserIdParams struct {
	DocumentID    int32
	HistoryTime   time.Time
	HistoryUserID *int32
}

func (q *Queries) SetDocumentHistoryUserId(ctx context.Context, arg SetDocumentHistoryUserIdParams) (*DocumentsHistory, error) {
	row := q.queryRow(ctx, q.setDocumentHistoryUserIdStmt, setDocumentHistoryUserId, arg.DocumentID, arg.HistoryTime, arg.HistoryUserID)
	var i DocumentsHistory
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Filename,
		&i.Filetype,
		&i.Content,
		&i.ContentHash,
		&i.DocumentID,
		&i.HistoryTime,
		&i.HistoryUserID,
		&i.Operation,
	)
	return &i, err
}
